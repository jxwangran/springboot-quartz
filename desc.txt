QRTZ_CRON_TRIGGERS，触发器表

QRTZ_FIRED_TRIGGERS，已触发的触发表

QRTZ_JOB_DETAILS，任务明细表

QRTZ_TRIGGERS，触发器表

QRTZ_LOCKS，锁表

QRTZ_CALENDARS 以 Blob 类型存储 Quartz 的 Calendar 信息   
QRTZ_CRON_TRIGGERS 存储 Cron Trigger，包括Cron表达式和时区信息   
QRTZ_FIRED_TRIGGERS 存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息QRTZ_PAUSED_TRIGGER_GRPS 存储已暂停的 Trigger组的信息   
QRTZ_SCHEDULER_STATE 存储少量的有关 Scheduler 的状态信息，和别的Scheduler实例(假如是用于一个集群中)   
QRTZ_LOCKS 存储程序的悲观锁的信息(假如使用了悲观锁)   
QRTZ_JOB_DETAILS 存储每一个已配置的 Job 的详细信息   
QRTZ_JOB_LISTENERS 存储有关已配置的 JobListener的信息   
QRTZ_SIMPLE_TRIGGERS存储简单的Trigger，包括重复次数，间隔，以及已触的次数   
QRTZ_BLOG_TRIGGERS Trigger 作为 Blob 类型存储(用于 Quartz 用户用JDBC创建他们自己定制的 Trigger 类型，JobStore并不知道如何存储实例的时候)   
QRTZ_TRIGGER_LISTENERS 存储已配置的 TriggerListener的信息   
QRTZ_TRIGGERS 存储已配置的 Trigger 的信息  

表qrtz_job_details:保存job详细信息,该表需要用户根据实际情况初始化   
job_name:集群中job的名字,该名字用户自己可以随意定制,无强行要求   
job_group:集群中job的所属组的名字,该名字用户自己随意定制,无强行要求   
job_class_name:集群中个notejob实现类的完全包名,quartz就是根据这个路径到classpath找到该job类   
is_durable:是否持久化,把该属性设置为1，quartz会把job持久化到数据库中   
job_data:一个blob字段，存放持久化job对象   

表qrtz_triggers: 保存trigger信息   
trigger_name:trigger的名字,该名字用户自己可以随意定制,无强行要求   
trigger_group:trigger所属组的名字,该名字用户自己随意定制,无强行要求   
job_name:qrtz_job_details表job_name的外键   
job_group:qrtz_job_details表job_group的外键   
trigger_state:当前trigger状态，设置为ACQUIRED,如果设置为WAITING,则job不会触发   
trigger_cron:触发器类型,使用cron表达式   

表qrtz_cron_triggers:存储cron表达式表   
trigger_name:qrtz_triggers表trigger_name的外键   
trigger_group:qrtz_triggers表trigger_group的外键   
cron_expression:cron表达式   

表qrtz_scheduler_state:存储集群中note实例信息，quartz会定时读取该表的信息判断集群中每个实例的当前状态   
instance_name:之前配置文件中org.quartz.scheduler.instanceId配置的名字，就会写入该字段，如果设置为AUTO,quartz会根据物理机名和当前时间产生一个名字   
last_checkin_time:上次检查时间   
checkin_interval:检查间隔时间 

===================================================================================================

instanceName，实例名，集群各节点的实例名相同
instanceId，实例ID，设为AUTO则由Quartz自动根据主机名、时间戳生成实例ID
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX，存储任务为数据库存储，不能使用内存，即RAMJobStore
isClustered，告诉Quartz是否为集群模式
=======================================================================================

原理： 
          集群通过故障切换和负载平衡的功能，能给调度器带来高可用性和伸缩性。目前集群只能工作在JDBC-JobStore（JobStore TX或者JobStoreCMT）方式下，从本质上来说，是使集群上的每一个节点通过共享同一个数据库来工作的（Quartz通过启动两个维护线程来维护数据库状态实现集群管理，一个是检测节点状态线程，一个是恢复任务线程）。 
        负载平衡是自动完成的，集群的每个节点会尽快触发任务。当一个触发器的触发时间到达时，第一个节点将会获得任务（通过锁定），成为执行任务的节点。 
                故障切换的发生是在当一个节点正在执行一个或者多个任务失败的时候。当一个节点失败了，其他的节点会检测到并且标 识在失败节点上正在进行的数据库中的任务。任何被标记为可恢复（任务详细信息的”requests recovery”属性）的任务都会被其他的节点重新执行。没有标记可恢复的任务只会被释放出来，将会在下次相关触发器触发时执行。

一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的


Quartz Scheduler在集群中的启动流程
　　Quartz Scheduler自身是察觉不到被集群的，只有配置给Scheduler的JDBC JobStore才知道。当Quartz Scheduler启动时，它调用JobStore的schedulerStarted()方法，它告诉JobStore Scheduler已经启动了。schedulerStarted() 方法是在JobStoreSupport类中实现的。JobStoreSupport类会根据quartz.properties文件中的设置来确定Scheduler实例是否参与到集群中。假如配置了集群，一个新的ClusterManager类的实例就被创建、初始化并启动。ClusterManager是在JobStoreSupport类中的一个内嵌类，继承了java.lang.Thread，它会定期运行，并对Scheduler实例执行检入的功能。Scheduler也要查看是否有任何一个别的集群节点失败了。检入操作执行周期在quartz.properties中配置。

侦测失败的Scheduler节点
　　当一个Scheduler实例执行检入时，它会查看是否有其他的Scheduler实例在到达他们所预期的时间还未检入。这是通过检查SCHEDULER_STATE表中Scheduler记录在LAST_CHEDK_TIME列的值是否早于org.quartz.jobStore.clusterCheckinInterval来确定的。如果一个或多个节点到了预定时间还没有检入，那么运行中的Scheduler就假定它(们) 失败了。

从故障实例中恢复Job
　　当一个Sheduler实例在执行某个Job时失败了，有可能由另一正常工作的Scheduler实例接过这个Job重新运行。要实现这种行为，配置给JobDetail对象的Job可恢复属性必须设置为true（job.setRequestsRecovery(true)）。如果可恢复属性被设置为false(默认为false)，当某个Scheduler在运行该job失败时，它将不会重新运行；而是由另一个Scheduler实例在下一次触发时间触发。Scheduler实例出现故障后多快能被侦测到取决于每个Scheduler的检入间隔（即2.3中提到的org.quartz.jobStore.clusterCheckinInterval）。
